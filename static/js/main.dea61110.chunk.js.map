{"version":3,"sources":["component/Idcard.js","component/Form.js","App.js","serviceWorker.js","index.js"],"names":["Idcard","props","className","data","college","name","src","class","address","DOB","bloodGroup","contact","year","code","Form","handleChangeName","event","setState","target","value","handleChangeClass","handleChangeAddress","handleChangeDOB","handleChangeBloodGroup","handleChangeContact","handleChangeStudentCode","handleChangeYear","handleChangeCollege","state","for","type","id","placeholder","this","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dea61110.chunk.js","sourcesContent":["import React from 'react';\nimport './idcard.css';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\n\nfunction Idcard(props) {\n      let printDocument = () => {\n            const input = document.getElementById('divToPrint')\n            html2canvas(input)\n               .then((canvas) => {\n                  const imgData = canvas.toDataURL('img/png')\n                  const pdf = new jsPDF();\n                  pdf.addImage(imgData, 'JPEG', 0, 0)\n                  pdf.save('invoice.pdf')\n               })\n         }\n      return (\n            <div className='id-design'>\n                  <div className='small-box'></div>\n                  <div className='college'>\n                        <h6 className=\"input-value-4\">\n\n                              <span className=\"highlight\"> {props.data.college}</span></h6>\n                  </div>\n\n\n                  <h5 className=\"input-value-2\">\n                                    Name:\n              <span className=\"highlight\"> {props.data.name}</span></h5>\n                                \n                        <div className='id-img'>\n                              <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRSp88-doiHJk4tHoxICem_6QnsKlOR1XpMoQ&usqp=CAU' />\n                              </div>\n                  <div className='idcard'>\n                        <h1></h1>\n\n                        \n\n                              <p className=\"input-value-2\">\n                                    Class:\n              <span className=\"highlight\"> {props.data.class}</span></p>\n                              <p className=\"input-value-3\">\n                                    Address:\n              <span className=\"highlight\"> {props.data.address}</span></p>\n                              <p className=\"input-value-4\">\n                                    D-O-B:\n              <span className=\"highlight\"> {props.data.DOB}</span></p>\n                              <p className=\"input-value-4\">\n                                    Blood-Group:\n              <span className=\"highlight\"> {props.data.bloodGroup}</span></p>\n                              <p className=\"input-value-4\">\n                                    Contact:\n              <span className=\"highlight\"> {props.data.contact}</span></p>\n                              <p className=\"input-value-4\">\n                                    Year:\n              <span className=\"highlight\"> {props.data.year}</span></p>\n                              <p className=\"input-value-4\">\n                                    Student Code:\n              <span className=\"highlight\"> {props.data.code}</span></p>\n                        </div>\n\n            </div>\n\n\n      )\n}\nexport default Idcard;\n","import React, { Component } from 'react';\nimport './form.css';\nimport './idcard.css';\nimport Idcard from './Idcard';\n\nclass Form extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      college: 'Collge Name',\n      name: null,\n      class: null,\n      address: null,\n      DOB: null,\n      bloodGroup: null,\n      contact: null,\n      year: null,\n      code: null,\n    }\n  }\n\n\n  handleChangeName = (event) => {\n    this.setState({\n      name: event.target.value\n\n    })\n  }\n\n  handleChangeClass = (event) => {\n    this.setState({\n      class: event.target.value\n\n    })\n  }\n\n  handleChangeAddress = (event) => {\n    this.setState({\n      address: event.target.value\n\n    })\n  }\n\n  handleChangeDOB = (event) => {\n    this.setState({\n      DOB: event.target.value\n\n    })\n  }\n  handleChangeBloodGroup = (event) => {\n    this.setState({\n      bloodGroup: event.target.value\n\n    })\n  }\n  handleChangeContact = (event) => {\n    this.setState({\n      contact: event.target.value\n\n    })\n  }\n  handleChangeStudentCode = (event) => {\n    this.setState({\n      code: event.target.value\n\n    })\n  }\n  handleChangeYear = (event) => {\n    this.setState({\n      year: event.target.value\n\n    })\n  }\n\n  handleChangeCollege = (event) => {\n    this.setState({\n      college: event.target.value\n\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-8\">\n          <div className='form-container form-box'>\n          <div className=\"form-group\">\n                <label for=\"inputAddress\"></label>\n                <input type=\"text\" className=\"form-control-top\" id=\"inputAddress\" placeholder=\"college Name\"\n                  value={this.state.college} onChange={this.handleChangeCollege}\n                />\n              </div>\n            <form>\n              <h1>Form</h1>\n              <div className=\"form-group\">\n                <label for=\"inputAddress\">Name:</label>\n                <input type=\"text\" className=\"form-control\" id=\"inputAddress\" placeholder=\"Student Name\"\n                  value={this.state.name} onChange={this.handleChangeName}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label for=\"inputAddress2\">Address:</label>\n                <input type=\"text\" className=\"form-control\" id=\"inputAddress2\" placeholder=\"Student Address\"\n                  value={this.state.address} onChange={this.handleChangeAddress}\n                />\n              </div>\n\n            \n              <div className=\"row\">\n\n              <div className=\"form-group col-md-6\">\n                <label for=\"inputAddress\">Class:</label>\n                <input type=\"text\" className=\"form-control\" id=\"inputAddress\" placeholder=\"Class\"\n                  value={this.state.class} onChange={this.handleChangeClass}\n                />\n              </div>\n                <div className=\"form-group col-md-6\">\n                  <label for=\"inputCity\">D-O-B: </label>\n                  <input type=\"text\" className=\"form-control\" id=\"inputCity\" placeholder='D-O-B'\n                    value={this.state.DOB} onChange={this.handleChangeDOB}\n                  />\n                </div>\n                </div>\n\n                <div class=\"form-row\">\n\n                <div className=\"form-group col-md-6\">\n                  <label for=\"inputZip\">BloodGroup:</label>\n                  <input type=\"text\" className=\"form-control\" id=\"inputZip\" placeholder='BloodGroup'\n                    value={this.state.bloodGroup} onChange={this.handleChangeBloodGroup}\n                  />\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <label for=\"inputEmail4\">Contact:</label>\n                  <input type=\"email\" className=\"form-control\" id=\"inputEmail4\" placeholder=\"Contact Number\"\n                    value={this.state.contact} onChange={this.handleChangeContact}\n                  />\n                </div>\n              </div>\n\n              <div class=\"form-row\">\n\n              \n                <div className=\"form-group col-md-6\">\n                  <label for=\"inputPassword4\">Year:</label>\n                  <input type=\"text\" className=\"form-control\" id=\"inputPassword4\" placeholder=\"Acadmic Year\"\n                    value={this.state.year} onChange={this.handleChangeYear}\n                  />\n                </div>\n                \n                <div className=\"form-group col-md-6\">\n                  <label for=\"inputPassword4\">Student Code:</label>\n                  <input type=\"text\" className=\"form-control\" id=\"inputPassword4\" placeholder=\"Student Code\"\n                    value={this.state.code} onChange={this.handleChangeStudentCode}\n                  />\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        <div className=\"col-md-4\">\n          <Idcard data={this.state} />\n        </div>\n      </div>\n\n    )\n  }\n}\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Form from './component/Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}